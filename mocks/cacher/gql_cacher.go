// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// GQLCacher is an autogenerated mock type for the GQLCacher type
type GQLCacher struct {
	mock.Mock
}

// CacheQuery provides a mock function with given fields: query, response, ttl
func (_m *GQLCacher) CacheQuery(query string, response interface{}, ttl ...time.Duration) error {
	_va := make([]interface{}, len(ttl))
	for _i := range ttl {
		_va[_i] = ttl[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, query, response)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, ...time.Duration) error); ok {
		r0 = rf(query, response, ttl...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOperation provides a mock function with given fields: operationName
func (_m *GQLCacher) GetOperation(operationName string) interface{} {
	ret := _m.Called(operationName)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(operationName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

type mockConstructorTestingTNewGQLCacher interface {
	mock.TestingT
	Cleanup(func())
}

// NewGQLCacher creates a new instance of GQLCacher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGQLCacher(t mockConstructorTestingTNewGQLCacher) *GQLCacher {
	mock := &GQLCacher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
